// Integrate the original functionality from sw.min.js
importScripts('/assets/js/data/swconf.js');
const e = swconf.purge;

self.addEventListener('install', (event) => {
    if (!e) {
        event.waitUntil(
            caches.open(swconf.cacheName).then((cache) => {
                return cache.addAll(swconf.resources);
            })
        );
    }
});

self.addEventListener('activate', (event) => {
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (e || cacheName !== swconf.cacheName) {
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
});

self.addEventListener('message', (event) => {
    if (event.data === 'SKIP_WAITING') {
        self.skipWaiting();
    }
});

self.addEventListener('fetch', (event) => {
    if (!event.request.headers.has('range')) {
        event.respondWith(
            caches.match(event.request).then((response) => {
                if (response) {
                    return response;
                }
                return fetch(event.request).then((networkResponse) => {
                    if (e || event.request.method !== 'GET' || !shouldCache(event.request.url)) {
                        return networkResponse;
                    }
                    const responseClone = networkResponse.clone();
                    caches.open(swconf.cacheName).then((cache) => {
                        cache.put(event.request, responseClone);
                    });
                    return networkResponse;
                });
            })
        );
    }
});

// Function to check if the URL should be cached (from sw.min.js)
function shouldCache(url) {
    const pathname = new URL(url).pathname;
    for (const denyPath of swconf.denyPaths) {
        if (pathname.startsWith(denyPath)) {
            return false;
        }
    }
    return true;
}

// Integrate the minicoi.js functionality
self.addEventListener('install', () => {
    console.log('Service worker installed, skipping waiting');
    self.skipWaiting();
});

self.addEventListener('activate', (event) => {
    console.log('Service worker activated, claiming clients');
    event.waitUntil(self.clients.claim());
});

self.addEventListener('fetch', (event) => {
    console.log('Fetch event for:', event.request.url);
    if (event.request.cache === 'only-if-cached' && event.request.mode !== 'same-origin') return;
    event.respondWith(
        fetch(event.request).then((response) => {
            const { body, status, statusText } = response;
            if (!status || status > 399) return response;
            const headers = new Headers(response.headers);
            headers.set('Cross-Origin-Opener-Policy', 'same-origin');
            headers.set('Cross-Origin-Embedder-Policy', 'require-corp');
            headers.set('Cross-Origin-Resource-Policy', 'cross-origin');
            return new Response(body, { status, statusText, headers });
        })
    );
});
